<?php
/**
 * DetailedSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Strava\Model;
use \Swagger\Client\Strava\ObjectSerializer;

/**
 * DetailedSegment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DetailedSegment extends SummarySegment 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DetailedSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'total_elevation_gain' => 'float',
        'map' => '\Swagger\Client\Strava\Model\PolylineMap',
        'effort_count' => 'int',
        'athlete_count' => 'int',
        'hazardous' => 'bool',
        'star_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'total_elevation_gain' => 'float',
        'map' => null,
        'effort_count' => null,
        'athlete_count' => null,
        'hazardous' => null,
        'star_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'total_elevation_gain' => 'total_elevation_gain',
        'map' => 'map',
        'effort_count' => 'effort_count',
        'athlete_count' => 'athlete_count',
        'hazardous' => 'hazardous',
        'star_count' => 'star_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'total_elevation_gain' => 'setTotalElevationGain',
        'map' => 'setMap',
        'effort_count' => 'setEffortCount',
        'athlete_count' => 'setAthleteCount',
        'hazardous' => 'setHazardous',
        'star_count' => 'setStarCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'total_elevation_gain' => 'getTotalElevationGain',
        'map' => 'getMap',
        'effort_count' => 'getEffortCount',
        'athlete_count' => 'getAthleteCount',
        'hazardous' => 'getHazardous',
        'star_count' => 'getStarCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['total_elevation_gain'] = isset($data['total_elevation_gain']) ? $data['total_elevation_gain'] : null;
        $this->container['map'] = isset($data['map']) ? $data['map'] : null;
        $this->container['effort_count'] = isset($data['effort_count']) ? $data['effort_count'] : null;
        $this->container['athlete_count'] = isset($data['athlete_count']) ? $data['athlete_count'] : null;
        $this->container['hazardous'] = isset($data['hazardous']) ? $data['hazardous'] : null;
        $this->container['star_count'] = isset($data['star_count']) ? $data['star_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The time at which the segment was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The time at which the segment was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets total_elevation_gain
     *
     * @return float
     */
    public function getTotalElevationGain()
    {
        return $this->container['total_elevation_gain'];
    }

    /**
     * Sets total_elevation_gain
     *
     * @param float $total_elevation_gain The segment's total elevation gain.
     *
     * @return $this
     */
    public function setTotalElevationGain($total_elevation_gain)
    {
        $this->container['total_elevation_gain'] = $total_elevation_gain;

        return $this;
    }

    /**
     * Gets map
     *
     * @return \Swagger\Client\Strava\Model\PolylineMap
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param \Swagger\Client\Strava\Model\PolylineMap $map map
     *
     * @return $this
     */
    public function setMap($map)
    {
        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets effort_count
     *
     * @return int
     */
    public function getEffortCount()
    {
        return $this->container['effort_count'];
    }

    /**
     * Sets effort_count
     *
     * @param int $effort_count The total number of efforts for this segment
     *
     * @return $this
     */
    public function setEffortCount($effort_count)
    {
        $this->container['effort_count'] = $effort_count;

        return $this;
    }

    /**
     * Gets athlete_count
     *
     * @return int
     */
    public function getAthleteCount()
    {
        return $this->container['athlete_count'];
    }

    /**
     * Sets athlete_count
     *
     * @param int $athlete_count The number of unique athletes who have an effort for this segment
     *
     * @return $this
     */
    public function setAthleteCount($athlete_count)
    {
        $this->container['athlete_count'] = $athlete_count;

        return $this;
    }

    /**
     * Gets hazardous
     *
     * @return bool
     */
    public function getHazardous()
    {
        return $this->container['hazardous'];
    }

    /**
     * Sets hazardous
     *
     * @param bool $hazardous Whether this segment is considered hazardous
     *
     * @return $this
     */
    public function setHazardous($hazardous)
    {
        $this->container['hazardous'] = $hazardous;

        return $this;
    }

    /**
     * Gets star_count
     *
     * @return int
     */
    public function getStarCount()
    {
        return $this->container['star_count'];
    }

    /**
     * Sets star_count
     *
     * @param int $star_count The number of stars for this segment
     *
     * @return $this
     */
    public function setStarCount($star_count)
    {
        $this->container['star_count'] = $star_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


