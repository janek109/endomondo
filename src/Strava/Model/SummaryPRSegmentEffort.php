<?php
/**
 * SummaryPRSegmentEffort
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Strava\Model;

use \ArrayAccess;
use \Swagger\Client\Strava\ObjectSerializer;

/**
 * SummaryPRSegmentEffort Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SummaryPRSegmentEffort implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SummaryPRSegmentEffort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pr_activity_id' => 'int',
        'pr_elapsed_time' => 'int',
        'pr_date' => '\DateTime',
        'effort_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pr_activity_id' => 'int64',
        'pr_elapsed_time' => null,
        'pr_date' => 'date-time',
        'effort_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pr_activity_id' => 'pr_activity_id',
        'pr_elapsed_time' => 'pr_elapsed_time',
        'pr_date' => 'pr_date',
        'effort_count' => 'effort_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pr_activity_id' => 'setPrActivityId',
        'pr_elapsed_time' => 'setPrElapsedTime',
        'pr_date' => 'setPrDate',
        'effort_count' => 'setEffortCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pr_activity_id' => 'getPrActivityId',
        'pr_elapsed_time' => 'getPrElapsedTime',
        'pr_date' => 'getPrDate',
        'effort_count' => 'getEffortCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pr_activity_id'] = isset($data['pr_activity_id']) ? $data['pr_activity_id'] : null;
        $this->container['pr_elapsed_time'] = isset($data['pr_elapsed_time']) ? $data['pr_elapsed_time'] : null;
        $this->container['pr_date'] = isset($data['pr_date']) ? $data['pr_date'] : null;
        $this->container['effort_count'] = isset($data['effort_count']) ? $data['effort_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pr_activity_id
     *
     * @return int
     */
    public function getPrActivityId()
    {
        return $this->container['pr_activity_id'];
    }

    /**
     * Sets pr_activity_id
     *
     * @param int $pr_activity_id The unique identifier of the activity related to the PR effort.
     *
     * @return $this
     */
    public function setPrActivityId($pr_activity_id)
    {
        $this->container['pr_activity_id'] = $pr_activity_id;

        return $this;
    }

    /**
     * Gets pr_elapsed_time
     *
     * @return int
     */
    public function getPrElapsedTime()
    {
        return $this->container['pr_elapsed_time'];
    }

    /**
     * Sets pr_elapsed_time
     *
     * @param int $pr_elapsed_time The elapsed time ot the PR effort.
     *
     * @return $this
     */
    public function setPrElapsedTime($pr_elapsed_time)
    {
        $this->container['pr_elapsed_time'] = $pr_elapsed_time;

        return $this;
    }

    /**
     * Gets pr_date
     *
     * @return \DateTime
     */
    public function getPrDate()
    {
        return $this->container['pr_date'];
    }

    /**
     * Sets pr_date
     *
     * @param \DateTime $pr_date The time at which the PR effort was started.
     *
     * @return $this
     */
    public function setPrDate($pr_date)
    {
        $this->container['pr_date'] = $pr_date;

        return $this;
    }

    /**
     * Gets effort_count
     *
     * @return int
     */
    public function getEffortCount()
    {
        return $this->container['effort_count'];
    }

    /**
     * Sets effort_count
     *
     * @param int $effort_count Number of efforts by the authenticated athlete on this segment.
     *
     * @return $this
     */
    public function setEffortCount($effort_count)
    {
        $this->container['effort_count'] = $effort_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


